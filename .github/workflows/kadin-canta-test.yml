name: kadin-canta
on:
   workflow_dispatch:  # Allows manual triggering
   schedule:
     - cron: '0 5 * * 1'  # Runs at 5:00 AM UTC on Monday 
    #  - cron: '0 14 * * *'  # Runs at 2:00 PM UTC daily
env:
  MONGODB_URL: ${{secrets.MONGODB_URL}}
  GH_TOKEN: ${{secrets.GH_TOKEN}}
  GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS}}
  GOOGLE_SHEET_ID: ${{secrets.GOOGLE_SHEET_ID}}

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      sites: ${{ steps.set-sites.outputs.sites }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install googleapis
      
      - name: Create package.json for CommonJS
        run: |
          cat > package.json << 'EOF'
          {
            "type": "commonjs"
          }
          EOF
      
      - name: Fetch sites from Google Sheets
        id: set-sites
        run: |
          cat > fetch_sites.js << 'EOF'
          const { google } = require('googleapis');
          
          async function fetchSites() {
            try {
              // Debug: Check if environment variables exist
              if (!process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS) {
                throw new Error('GOOGLE_SERVICE_ACCOUNT_CREDENTIALS environment variable is not set');
              }
              
              if (!process.env.GOOGLE_SHEET_ID) {
                throw new Error('GOOGLE_SHEET_ID environment variable is not set');
              }
              
              console.log('Credentials (base64) length:', process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS.length);
              
              // Decode base64 credentials
              let decodedCredentials;
              try {
                decodedCredentials = Buffer.from(process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS, 'base64').toString('utf8');
                console.log('Decoded credentials length:', decodedCredentials.length);
                console.log('First 50 chars of decoded:', decodedCredentials.substring(0, 50));
              } catch (decodeError) {
                console.error('Base64 Decode Error:', decodeError.message);
                throw new Error('Failed to decode base64 GOOGLE_SERVICE_ACCOUNT_CREDENTIALS');
              }
              
              // Parse the service account credentials
              let credentials;
              try {
                credentials = JSON.parse(decodedCredentials);
              } catch (jsonError) {
                console.error('JSON Parse Error:', jsonError.message);
                console.error('Invalid JSON content:', decodedCredentials.substring(0, 100));
                throw new Error('Failed to parse decoded credentials as JSON');
              }
              
              // Create auth client
              const auth = new google.auth.GoogleAuth({
                credentials: credentials,
                scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
              });
              
              const sheets = google.sheets({ version: 'v4', auth });
              
              // Fetch data from the sheet
              console.log('Fetching data from sheet ID:', process.env.GOOGLE_SHEET_ID);
              console.log('Using range: wbags!A1:A');
              
              const response = await sheets.spreadsheets.values.get({
                spreadsheetId: process.env.GOOGLE_SHEET_ID,
                range: 'wbags!A1:A',
              });
              
              const rows = response.data.values;
              if (!rows || rows.length === 0) {
                console.log('No data found.');
                return [];
              }
              
              console.log('Raw data from sheet:', rows);
              
              // Extract site names (assuming they are in the first column)
              // Filter out empty cells and header if exists
              const sites = rows
                .flat()
                .filter(site => site && site.trim() !== '' && site.toLowerCase() !== 'site')
                .map(site => site.trim());
              
              console.log('Processed sites:', sites);
              return sites;
            } catch (error) {
              console.error('Error fetching data from Google Sheets:', error.message);
              console.error('Full error:', error);
              process.exit(1);
            }
          }
          
          fetchSites().then(sites => {
            const sitesArray = JSON.stringify(sites);
            console.log('Final sites array:', sitesArray);
            console.log(`sites=${sitesArray}`);
          }).catch(error => {
            console.error('Promise Error:', error);
            process.exit(1);
          });
          EOF
          
          node fetch_sites.js >> $GITHUB_OUTPUT

  dizitv_job:
    needs: prepare_matrix
    strategy:
      fail-fast: false
      matrix:
        site: ${{ fromJSON(needs.prepare_matrix.outputs.sites) }}
    uses: ./.github/workflows/reusableProdPuppeteer.yml
    with:
      site: ${{ matrix.site }}
    secrets: inherit