name: kadin-canta-test-1
on:
   workflow_dispatch:  # Allows manual triggering
   schedule:
     - cron: '0 5 * * 1'  # Runs at 5:00 AM UTC on Monday 
    #  - cron: '0 14 * * *'  # Runs at 2:00 PM UTC daily

env:
  MONGODB_URL: ${{secrets.MONGODB_URL}}
  GH_TOKEN: ${{secrets.GH_TOKEN}}
  GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS}}
  GOOGLE_SHEET_ID: ${{secrets.GOOGLE_SHEET_ID}}

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      sites: ${{ steps.set-sites.outputs.sites }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Updated to Node 20
          cache: 'npm'
      
      - name: Cache Google APIs
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-googleapis-${{ hashFiles('**/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-googleapis-
      
      - name: Install dependencies
        run: npm install --prefer-offline googleapis
      
      - name: Fetch sites from Google Sheets
        id: set-sites
        run: |
          cat > fetch_sites.js << 'EOF'
          const { google } = require('googleapis');
          
          async function fetchSites() {
            try {
              // Check if environment variables exist
              if (!process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS) {
                throw new Error('GOOGLE_SERVICE_ACCOUNT_CREDENTIALS environment variable is not set');
              }
              
              if (!process.env.GOOGLE_SHEET_ID) {
                throw new Error('GOOGLE_SHEET_ID environment variable is not set');
              }
              
              // Decode base64 credentials
              let decodedCredentials;
              try {
                decodedCredentials = Buffer.from(process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS, 'base64').toString('utf8');
              } catch (decodeError) {
                throw new Error('Failed to decode base64 GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ' + decodeError.message);
              }
              
              // Parse the service account credentials
              let credentials;
              try {
                credentials = JSON.parse(decodedCredentials);
              } catch (jsonError) {
                throw new Error('Failed to parse decoded credentials as JSON: ' + jsonError.message);
              }
              
              // Create auth client with timeout
              const auth = new google.auth.GoogleAuth({
                credentials: credentials,
                scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
              });
              
              const sheets = google.sheets({ 
                version: 'v4', 
                auth,
                timeout: 30000  // 30 second timeout
              });
              
              console.log('Fetching data from Google Sheets...');
              
              // Fetch data from the sheet - skip header row
              const response = await sheets.spreadsheets.values.get({
                spreadsheetId: process.env.GOOGLE_SHEET_ID,
                range: 'wbags!A2:F', // Get all relevant columns at once
              });
              
              const rows = response.data.values;
              if (!rows || rows.length === 0) {
                console.log('No data found in sheet');
                return [];
              }
              
              console.log(`Found ${rows.length} rows in sheet`);
              
              // Extract site names from column A (index 0) where column F (index 5) is not "TRUE"
              const sites = rows
                .filter(row => {
                  const brandName = row[0]; // Column A
                  const isPaused = row[5]; // Column F (paused)
                  
                  // Include only if brand name exists, is not empty, and is not paused
                  return brandName && 
                         brandName.trim() !== '' && 
                         brandName.toLowerCase() !== 'brands' &&
                         isPaused !== 'TRUE';
                })
                .map(row => row[0].trim()); // Get the brand name and trim whitespace
              
              console.log(`Filtered to ${sites.length} active sites:`, sites);
              return sites;
              
            } catch (error) {
              console.error('Error fetching data from Google Sheets:', error.message);
              
              // Return empty array instead of exiting - allows workflow to continue
              console.log('Returning empty array due to error');
              return [];
            }
          }
          
          fetchSites().then(sites => {
            if (sites.length === 0) {
              console.log('No sites to process');
            }
            
            const sitesArray = JSON.stringify(sites);
            console.log(`sites=${sitesArray}`);
          }).catch(error => {
            console.error('Promise Error:', error.message);
            // Output empty array instead of failing
            console.log('sites=[]');
          });
          EOF
          
          node fetch_sites.js >> $GITHUB_OUTPUT

  dizitv_job:
    needs: prepare_matrix
    # Only run if there are sites to process
    if: ${{ fromJSON(needs.prepare_matrix.outputs.sites)[0] }}
    strategy:
      fail-fast: false
      max-parallel: 3  # Limit concurrent jobs to avoid rate limits
      matrix:
        site: ${{ fromJSON(needs.prepare_matrix.outputs.sites) }}
    uses: ./.github/workflows/reusableProdPuppeteer.yml
    with:
      site: ${{ matrix.site }}
    secrets: inherit