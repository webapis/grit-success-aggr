name: sponsorProdManualAggregPuppeteer

on:    
  workflow_dispatch:     
    inputs:       
      site:         
        description: 'site'         
        required: true         
        type: string 

env:   
  MONGODB_URL: ${{secrets.MONGODB_URL}}   
  GH_TOKEN: ${{secrets.GH_TOKEN}}
  GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS}}
  GOOGLE_SHEET_ID: ${{secrets.GOOGLE_SHEET_ID}}
  GOOGLE_SHEET_ID_FOR_LOGS: ${{secrets.GOOGLE_SHEET_ID_FOR_LOGS}}

jobs:
  prepare_sheet_data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install googleapis
      
      - name: Create package.json for CommonJS
        run: |
          cat > package.json << 'EOF'
          {
            "type": "commonjs"
          }
          EOF
      
      # Fetch ALL sheet data once and cache it
      - name: Fetch sheet data and create artifact
        run: |
          cat > fetch_data.js << 'EOF'
          const { google } = require('googleapis');
          const fs = require('fs');
          
          async function fetchAllSheetData() {
            try {
              console.log('üîç Starting Google Sheets data fetch...');
              
              if (!process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS) {
                throw new Error('GOOGLE_SERVICE_ACCOUNT_CREDENTIALS environment variable is not set');
              }
              
              if (!process.env.GOOGLE_SHEET_ID) {
                throw new Error('GOOGLE_SHEET_ID environment variable is not set');
              }
              
              console.log('üîë Decoding credentials...');
              const decodedCredentials = Buffer.from(process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS, 'base64').toString('utf8');
              const credentials = JSON.parse(decodedCredentials);
              
              console.log('üîê Authenticating with Google Sheets API...');
              const auth = new google.auth.GoogleAuth({
                credentials: credentials,
                scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
              });
              
              const sheets = google.sheets({ version: 'v4', auth });
              
              console.log('üìä Fetching data from sheet...');
              // Fetch ALL data from the sheet (A:K columns)
              const response = await sheets.spreadsheets.values.get({
                spreadsheetId: process.env.GOOGLE_SHEET_ID,
                range: 'wbags-scroll!A:K',
              });
              
              const rows = response.data.values;
              console.log(`üìù Retrieved ${rows ? rows.length : 0} rows from sheet`);
              
              if (!rows || rows.length === 0) {
                console.log('‚ö†Ô∏è  No data found in sheet');
                return { sheetData: { timestamp: new Date().toISOString(), runId: process.env.GITHUB_RUN_ID || 'local', data: [] } };
              }
              
              console.log(`üîç Processing ${rows.length} total rows...`);
              
              // Prepare sheet data for sharing
              const sheetData = {
                timestamp: new Date().toISOString(),
                runId: process.env.GITHUB_RUN_ID || 'local',
                data: rows
              };
              
              // Save to file for artifact upload
              fs.writeFileSync('sheet-data.json', JSON.stringify(sheetData, null, 2));
              console.log('üíæ Sheet data saved to file');
              
              return { sheetData };
            } catch (error) {
              console.error('‚ùå Error fetching data from Google Sheets:', error.message);
              console.error('Full error:', error);
              process.exit(1);
            }
          }
          
          fetchAllSheetData().then(result => {
            console.log('‚úÖ Sheet data fetch completed successfully');
          }).catch(error => {
            console.error('‚ùå Promise Error:', error.message);
            process.exit(1);
          });
          EOF
          
          node fetch_data.js

      # Upload sheet data as artifact for the reusable workflow to download
      - name: Upload sheet data artifact
        uses: actions/upload-artifact@v4
        with:
          name: sheet-data
          path: sheet-data.json
          retention-days: 1

  dizitv_job:
    needs: prepare_sheet_data
    uses: ./.github/workflows/reusableProdPuppeteer.yml
    with:
      site: ${{inputs.site}}
    secrets: inherit

  summarize_run:
    runs-on: ubuntu-latest
    needs: dizitv_job # This job runs only after the crawler job finishes
    if: always() # Run this job even if the crawler job fails, to summarize what was completed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download all run artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # Download all artifacts into an 'artifacts' directory

      - name: List downloaded files
        run: ls -R artifacts/

      - name: Generate Final Summary Report
        run: node scripts/summarize-run.js artifacts/

      - name: Upload Final Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: final-run-summary
          path: artifacts/final-summary.json

      - name: Upload Aggregated Metrics to Google Sheet
        if: always()
        run: |
          npm ci --prefer-offline --no-audit
          node scripts/upload-summary-to-sheet.js artifacts/final-summary.json